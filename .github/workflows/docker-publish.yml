name: Docker Publish Recommendation Engine

on:
  push:
    branches: [ "**" ]
    tags: [ "**" ]
  pull_request:
    branches: [ "**" ]

env:
  REGISTRY: cr.yandex
  IMAGE_NAME: mysanta/recommendation_engine

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Extract version
      shell: bash
      run: |
        # Extract branch/tag name from Git ref and replace slashes with hyphens
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,' | sed 's/\//-/g')
        
        # Remove 'v' prefix from version tags
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        
        
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Set environment variables based on branch
      shell: bash
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "APP_ENV=production" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "APP_ENV=development" >> $GITHUB_ENV
        else
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "APP_ENV=development" >> $GITHUB_ENV
        fi

    - name: Build Docker image
      run: |
        docker build \
          --file Dockerfile.production \
          --build-arg APP_ENV=${{ env.APP_ENV }} \
          --tag $IMAGE_NAME:$VERSION \
          .

    - name: Log in to Yandex Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: oauth
        password: ${{ secrets.YANDEX_CONTAINER_TOKEN }}

    - name: Tag image for registry
      if: github.event_name != 'pull_request'
      run: |
        docker tag $IMAGE_NAME:$VERSION ${{ env.REGISTRY }}/${{ secrets.YANDEX_CONTAINER_ID }}/$IMAGE_NAME:$VERSION

    - name: Push image to registry
      if: github.event_name != 'pull_request'
      run: |
        docker push ${{ env.REGISTRY }}/${{ secrets.YANDEX_CONTAINER_ID }}/$IMAGE_NAME:$VERSION


    - name: Clean up
      if: always()
      run: |
        docker system prune -f